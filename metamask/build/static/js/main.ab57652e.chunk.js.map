{"version":3,"sources":["components/Post.js","components/PostPage.js","components/Auth/UserContext.js","components/New.js","components/Login.js","components/Register.js","components/Home.js","service/socket.js","components/MessagesContainer.js","components/Convo.js","components/Conversations.js","components/Posts.js","components/Feed.js","components/MyPosts.js","App.js","reportWebVitals.js","index.js"],"names":["Post","resetReload","postData","auth","useContext","UserContext","history","useHistory","className","src","imageData","Buffer","from","toString","contentType","getImage","user","authorId","authorFullName","content","onClick","push","to","_id","PostPage","posts","authToken","postId","useParams","useState","setLoading","editMode","setEditMode","newContent","setNewContent","imageSrc","setImageSrc","currentPost","find","post","useEffect","imageType","onSubmit","e","a","preventDefault","fetch","method","headers","body","JSON","stringify","userId","then","response","json","data","message","console","log","result","deleteAction","id","href","type","style","cursor","signout","alt","name","defaultValue","onChange","target","value","createContext","New","setPostData","image","setImage","allData","FormData","append","files","required","form","Login","changeAuthToken","username","setUsername","password","setPassword","setFirstLogin","pathname","ok","currentUser","AuthToken","signin","replace","alert","height","display","alignItems","paddingTop","paddingBottom","width","maxWidth","padding","margin","placeholder","Register","firstname","lastname","newUser","setNewUser","Home","useRouteMatch","path","url","fetchData","exact","socket","io","transports","autoConnect","MessagesContainer","props","myRef","React","createRef","this","current","scrollTop","scrollHeight","ref","overflow","allMessages","map","messageAuthorFirstName","textAlign","messageContent","Component","Convo","otherConnected","changeOtherConnected","userData","newMessage","setNewMessage","newConversation","setNewConversation","otherUserId","refetchData","clientUser","otherUser","convoExists","clientExists","otherExists","conversations","forEach","convo","getConvoExist","clientMessages","otherMessages","conversation","messages","element","messageCreatedAt","firstName","concat","sort","b","bDate","Date","connectedUser","connect","newMessageHandler","sentFrom","usersHandler","connectedUsers","connected","socketId","on","off","disconnect","startConversation","firstMessage","sendMessage","emit","otherSocketId","paddingLeft","paddingRight","Conversations","myConversations","getFullName","lastName","length","key","background","Posts","idx","Feed","loading","MyPosts","myPosts","filter","App","appData","setAppData","setOtherConnected","setAuthToken","newData","tweets","givenData","tweet","createdAt","getTweets","Provider","useProvideAuth","newToken","setUser","cb","PrivateRoute","children","render","location","state","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ab57652e.chunk.js","sourcesContent":["import { useContext } from 'react';\nimport { useHistory, Link } from \"react-router-dom\"\nimport UserContext from \"./Auth/UserContext\"\n\nconst Post = ({ resetReload, postData }) => {\n\n    let auth = useContext(UserContext)\n    let history = useHistory()\n\n    const deleteAction = async () => {\n        const result = await fetch(\"/delete-post\", {\n            method: \"DELETE\",\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ userId: auth.user, postId: postData._id })\n        })\n            .then(response => response.json())\n            .then(data => {\n                return data\n            })\n\n        resetReload(result)\n    }\n\n    const getImage = () => {\n        const imageData = new Buffer.from(postData.imageData).toString(\"base64\")\n\n        const imageType = postData.contentType\n\n        const imageString = \"data:\" + imageType + \";base64,\" + imageData\n\n        return imageString\n    }\n\n\n    return (\n        <>\n            <div className=\"col-xl-8 col-lg-7\">\n                <img className=\"img-fluid mb-3 mb-lg-0\" src={getImage()} />\n            </div>\n            <div className=\"col-xl-4 col-lg-5\">\n                <div className=\"featured-text text-center text-lg-left\">\n                    {auth.user === postData.authorId ? <h4>By: Me</h4> : <h4>By: {postData.authorFullName}</h4>}\n                    <p className=\"text-black-50 mb-0\">\n                        {postData.content}\n                    </p>\n                    <hr className=\"my-4 mx-auto\" />\n                    {auth.user === postData.authorId ?\n                        <></>\n                        :\n                        <>\n                            <a className=\"btn btn-success\" onClick={() => history.push(\"/conversations/\" + postData.authorId)}>SEND MESSAGE</a>\n                            <hr className=\"my-4 mx-auto\" />\n                        </>}\n                    <Link className=\"btn btn-success\" to={`/feed/${postData._id}`}>VIEW</Link>\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport default Post","import { useParams, useHistory, Link } from \"react-router-dom\"\nimport { useState, useEffect, useContext } from 'react'\nimport UserContext from \"./Auth/UserContext\"\n\nconst PostPage = ({ posts, resetReload, authToken }) => {\n    let { postId } = useParams()\n    let auth = useContext(UserContext)\n    let history = useHistory()\n\n    const [loading, setLoading] = useState(false)\n    const [editMode, setEditMode] = useState(false)\n    const [newContent, setNewContent] = useState()\n    const [imageSrc, setImageSrc] = useState(null)\n\n    const currentPost = posts.find(post => {\n        return (post._id === postId)\n    })\n\n    useEffect(() => {\n        const imageData = new Buffer.from(currentPost.imageData).toString(\"base64\")\n\n        const imageType = currentPost.contentType\n\n        const imageString = \"data:\" + imageType + \";base64,\" + imageData\n\n        setImageSrc(imageString)\n    }, [])\n\n    const onSubmit = async (e) => {\n        e.preventDefault()\n\n        setLoading(true)\n        const result = await fetch(\"/edit-post\", {\n            method: \"PUT\",\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            // insert new post here\n            body: JSON.stringify({\n                userId: auth.user,\n                authToken: authToken,\n                post: {\n                    postId: postId,\n                    content: newContent\n                }\n            })\n        })\n            .then(response => response.json())\n            .then(data => {\n                if (data.message === \"User authenticated\") {\n                    return data.posts\n                } else {\n                    console.log(\"User not authenticated\")\n                }\n            })\n        setLoading(false)\n        setEditMode(false)\n        resetReload(result)\n    }\n\n    const deleteAction = async () => {\n        setLoading(true)\n        const result = await fetch(\"/delete-post\", {\n            method: \"DELETE\",\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                userId: auth.user,\n                authToken: authToken,\n                postId: currentPost._id\n            })\n        })\n            .then(response => response.json())\n            .then(data => {\n                if (data.message === \"User authenticated\") {\n                    return data.posts\n                } else {\n                    console.log(data.message)\n                }\n            })\n\n        setLoading(false)\n        history.push(\"/feed\")\n        resetReload(result)\n    }\n\n    const editAction = async () => {\n        setLoading(true)\n        const result = await fetch(\"http://localhost:5000/edit-post\", {\n            method: \"PUT\",\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            // insert new post here\n            body: JSON.stringify({\n                userId: auth.user, post: {\n                    postId: postId,\n                    content: newContent,\n                    createdAt: currentPost.createdAt\n                }\n            })\n        })\n            .then(response => response.json())\n            .then(data => {\n                return data\n            })\n\n        setLoading(false)\n        resetReload(result)\n    }\n\n    return (\n        <>\n            <nav className=\"navbar navbar-expand-lg navbar-light fixed-top\" id=\"mainNav\">\n                <div className=\"container px-4 px-lg-5\">\n                    <a className=\"navbar-brand\" href=\"#page-top\">Creative Share</a>\n                    <button className=\"navbar-toggler navbar-toggler-right\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarResponsive\" aria-controls=\"navbarResponsive\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                        Menu\n                    <i className=\"fas fa-bars\"></i>\n                    </button>\n                    <div className=\"collapse navbar-collapse\" id=\"navbarResponsive\">\n                        <ul className=\"navbar-nav ms-auto\">\n                            <li className=\"nav-item\"><Link className=\"nav-link\" to=\"/home\">Home</Link></li>\n                            <li className=\"nav-item\"><Link className=\"nav-link\" to=\"/feed\">Feed</Link></li>\n                            <li className=\"nav-item\"><Link className=\"nav-link\" to=\"/my-posts\">My Posts</Link></li>\n                            <li className=\"nav-item\"><Link className=\"nav-link\" to=\"/conversations\">Conversations</Link></li>\n                            <li className=\"nav-item\"><a className=\"nav-link\" style={{ cursor: \"pointer\" }} onClick={() => {\n                                auth.signout(() => history.push(\"/\"));\n                            }}>LOGOUT</a></li>\n                        </ul>\n                    </div>\n                </div>\n            </nav>\n            <section className=\"projects-section bg-light\" id=\"projects\">\n                <div className=\"container px-4 px-lg-5\">\n                    <h4>By: {currentPost.authorFullName}</h4>\n\n                    <div className=\"row gx-0 mb-5 mb-lg-0 justify-content-center\">\n                        <div className=\"col-lg-6\">\n                            <img className=\"img-fluid\" src={imageSrc} alt=\"...\" />\n                        </div>\n                        {editMode ?\n                            <>\n                                <div className=\"col-lg-6\">\n                                    <div className=\"bg-black text-center h-100 project\">\n                                        <div className=\"d-flex h-100\">\n                                            <div className=\"project-text w-100 my-auto text-center text-lg-left\">\n                                                <form name=\"edit-form\" onSubmit={(e) => onSubmit(e)}>\n                                                    <textarea\n                                                        className=\"form-control\"\n                                                        defaultValue={currentPost.content}\n                                                        onChange={e => setNewContent(e.target.value)} />\n                                                    <button className=\"btn text-white \" type=\"submit\"  >CONFIRM EDIT</button>\n                                                </form>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <a className=\"btn\" onClick={() => setEditMode(false)}>CANCEL</a>\n                            </>\n                            :\n                            <>\n                                <div className=\"col-lg-6\">\n                                    <div className=\"bg-black text-center h-100 project\">\n                                        <div className=\"d-flex h-100\">\n                                            <div className=\"project-text w-100 my-auto text-center text-lg-left\">\n                                                <h5 className=\"text-white\">\n                                                    {currentPost.content}\n                                                </h5>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                                {auth.user === currentPost.authorId ?\n                                    <>\n                                        <a className=\"btn\" onClick={() => setEditMode(true)}>EDIT</a>\n                                        <a className=\"btn btn-danger\" onClick={() => deleteAction()}>DELETE</a>\n                                    </>\n                                    :\n                                    <a\n                                        className=\"btn btn-secondary\"\n                                        onClick={() => history.push(\"/conversations/\" + currentPost.authorId)}>\n                                        SEND MESSAGE\n                                        </a>}\n                            </>\n                        }\n\n                    </div>\n                </div>\n            </section>\n        </>\n    )\n}\n\nexport default PostPage","import { createContext } from 'react'\n\nconst UserContext = createContext()\n\nexport default UserContext","import { useState, useContext } from \"react\"\nimport { useHistory, Link } from \"react-router-dom\"\nimport UserContext from \"./Auth/UserContext\"\n\nconst New = ({ resetReload, authToken }) => {\n    let history = useHistory()\n    let auth = useContext(UserContext)\n\n    const [postData, setPostData] = useState({\n        content: \"\",\n        userId: auth.user\n    })\n    const [image, setImage] = useState()\n    const [loading, setLoading] = useState(false)\n\n    const onSubmit = async (e) => {\n        e.preventDefault()\n\n        // consolidate all data into FormData object\n        let allData = new FormData()\n        allData.append(\"content\", postData.content)\n        allData.append(\"userId\", postData.userId)\n        allData.append(\"image\", image.image)\n        allData.append(\"authToken\", authToken)\n\n        setLoading(true)\n\n        const result = await fetch(\"/new-post-v2\", {\n            method: \"POST\",\n            body: allData\n        })\n            .then(response => response.json())\n            .then(data => {\n                if (data.message === \"User authenticated\") {\n                    return data.posts\n                } else {\n                    console.log(data.message)\n                }\n            })\n\n\n        history.push(\"/feed\")\n        resetReload(result)\n    }\n\n    const onOtherSubmit = async (e) => {\n        e.preventDefault()\n\n        let toSendData = new FormData()\n        toSendData.append(\"name\", \"Alex\")\n        toSendData.append(\"image\", image.image)\n\n        const result = await fetch(\"http://localhost:5000/test-post\", {\n            method: \"POST\",\n            body: toSendData\n        })\n            .then(response => response.json())\n            .then(data => {\n                return data\n            })\n\n        console.log(result)\n    }\n\n    return (\n        <>\n            <nav className=\"navbar navbar-expand-lg navbar-light fixed-top\" id=\"mainNav\">\n                <div className=\"container px-4 px-lg-5\">\n                    <a className=\"navbar-brand\" href=\"#page-top\">Creative Share</a>\n                    <button className=\"navbar-toggler navbar-toggler-right\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarResponsive\" aria-controls=\"navbarResponsive\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                        Menu\n                    <i className=\"fas fa-bars\"></i>\n                    </button>\n                    <div className=\"collapse navbar-collapse\" id=\"navbarResponsive\">\n                        <ul className=\"navbar-nav ms-auto\">\n                            <li className=\"nav-item\"><Link className=\"nav-link\" to=\"/home\">Home</Link></li>\n                            <li className=\"nav-item\"><Link className=\"nav-link\" to=\"/feed\">Feed</Link></li>\n                            <li className=\"nav-item\"><Link className=\"nav-link\" to=\"/my-posts\">My Posts</Link></li>\n                            <li className=\"nav-item\"><Link className=\"nav-link\" to=\"/conversations\">Conversations</Link></li>\n                            <li className=\"nav-item\"><a className=\"nav-link\" style={{ cursor: \"pointer\" }} onClick={() => {\n                                auth.signout(() => history.push(\"/\"));\n                            }}>LOGOUT</a></li>\n                        </ul>\n                    </div>\n                </div>\n            </nav>\n            <section className=\"projects-section bg-light\" id=\"projects\">\n                <div className=\"container px-4 px-lg-5\">\n                    <div className=\"row gx-0 mb-4 mb-lg-5 align-items-center\">\n                        <form id=\"new-post\" onSubmit={(e) => onSubmit(e)} >\n                            <input className=\"form-control mb-2\" type=\"file\" id=\"formFile\" name=\"image\"\n                                // change for image input\n                                onChange={e => {\n                                    // let currImage = new FormData()\n                                    // currImage.append(\"image\", e.target.files[0])\n\n                                    setImage({ image: e.target.files[0] })\n                                }}\n                                required />\n                            <textarea className=\"form-control mb-2\"\n                                // change for text input\n                                onChange={e => {\n                                    setPostData({\n                                        content: e.target.value,\n                                        userId: postData.userId\n                                    })\n                                }} required />\n                        </form>\n                        <button form=\"new-post\" type=\"submit\" className=\"btn btn-secondary\">POST</button>\n                        <button onClick={() => history.push(\"/feed\")} className=\"btn btn-danger\">CANCEL</button>\n                    </div>\n                </div>\n            </section>\n        </>\n\n        // <div>\n        //     {loading && <h4>Loading...</h4>}\n        //     <form onSubmit={(e) => onSubmit(e)}>\n        //         <TextField\n        //             name=\"content\"\n        //             id=\"outlined-multiline\"\n        //             label=\"Content\"\n        //             rows={6}\n        //             multiline\n        //             variant=\"outlined\"\n        //             required\n        //             onChange={e => setPost({ content: e.target.value })}\n        //             value={post.content} />\n        //         <Button type=\"submit\" variant=\"contained\" color=\"primary\">Post</Button>\n        //         <Button variant=\"contained\" color=\"secondary\" onClick={() => onCancel()} >Cancel</Button>\n        //     </form>\n        //     <h2>Content: {post.content}</h2>\n        // </div>\n    )\n}\n\nexport default New","import { useHistory, Link } from \"react-router-dom\"\nimport { useState, useContext } from \"react\"\nimport UserContext from './Auth/UserContext'\n\nconst Login = ({ changeAuthToken }) => {\n    const [username, setUsername] = useState(\"\")\n    const [password, setPassword] = useState(\"\")\n    const [firstLogin, setFirstLogin] = useState(true)\n\n    let history = useHistory()\n    const auth = useContext(UserContext)\n\n    //let { from } = location.state || { from: { pathname: \"/home\" } };\n    let { from } = { from: { pathname: \"/home\" } };\n\n    let login = (currentUser) => {\n        auth.signin(() => {\n            history.replace(from);\n        }, currentUser);\n    };\n\n    const onSubmit = (e) => {\n        e.preventDefault()\n\n        // try login with server\n        // if valid, login\n        // hit api with username and password, get back boolean\n\n        // if not valid, prompt user to try again\n\n        fetch(\"/attempt-login\", {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ username: username, password: password })\n        })\n            .then(response => {\n                if (response.ok) {\n                    return response.json()\n                }\n                throw response\n            })\n            .then((response) => {\n                // user was found\n                if (response.message === \"User found!\") {\n                    changeAuthToken(response.AuthToken)\n                    login(response.user._id)\n                }\n                else if (response.message === \"User not found!\") {\n                    alert(response.message)\n                    setFirstLogin(false)\n                }\n            })\n    }\n\n    return (\n        <div className=\"text-center\" \n        style={{ \n            height: \"100%\", \n            display: \"flex\", \n            alignItems: \"center\", \n            paddingTop: \"40px\",\n            paddingBottom: \"40px\"\n            }}>\n            <main style={{ width: \"100%\", maxWidth: \"330px\", padding: \"15px\", margin: \"auto\" }}>\n                <form onSubmit={(e) => onSubmit(e)}>\n                    <h1 className=\"h3 mb-3 fw-normal\">Please sign in</h1>\n                    <div className=\"form-floating\">\n                        <input type=\"username\" className=\"form-control\" id=\"floatingInput\" placeholder=\"Username\"\n                        onChange={e => setUsername(e.target.value)} required/>\n                        <label>Username</label>\n                    </div>\n                    <div className=\"form-floating\">\n                        <input type=\"password\" className=\"form-control\" id=\"floatingPassword\" placeholder=\"Password\"\n                        onChange={e => setPassword(e.target.value)} required/>\n                        <label>Password</label>\n                    </div>\n                    <button className=\"w-100 btn btn-lg btn-primary\" type=\"submit\">Sign in</button>\n                </form>\n                <h5>Don't have an account? Register {<Link to=\"register\">Here</Link>}</h5>\n            </main>\n        </div>\n    )\n}\n\nexport default Login\n\n","import { useState } from \"react\"\nimport { Link, useHistory } from 'react-router-dom'\n\nconst Register = ({ resetReload }) => {\n    let history = useHistory()\n\n    const [newUser, setNewUser] = useState({\n        firstname: \"\",\n        lastname: \"\",\n        username: \"\",\n        password: \"\"\n    })\n\n    const onSubmit = async (e) => {\n        e.preventDefault()\n\n        const result = await fetch(\"/new-user\", {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(newUser)\n        })\n            .then(response => response.json())\n            .then(data => {\n                if (data.message === \"Successful\") {\n                    history.push(\"/login\")\n                    resetReload(data.posts)\n                    \n                    return data.posts\n                } else {\n                    alert(data.message)\n                }\n            })\n    }\n\n    return (\n        <div className=\"text-center\"\n            style={{\n                height: \"100%\",\n                display: \"flex\",\n                alignItems: \"center\",\n                paddingTop: \"40px\",\n                paddingBottom: \"40px\"\n            }}>\n            <main style={{ width: \"100%\", maxWidth: \"330px\", padding: \"15px\", margin: \"auto\" }}>\n                <form onSubmit={(e) => onSubmit(e)}>\n                    <h1 className=\"h3 mb-3 fw-normal\">Register here</h1>\n                    <div className=\"form-floating\">\n                        <input className=\"form-control\" placeholder=\"Firstname\"\n                            onChange={e => setNewUser({\n                                firstname: e.target.value,\n                                lastname: newUser.lastname,\n                                username: newUser.username,\n                                password: newUser.password\n                            })} required />\n                        <label>Firstname</label>\n                    </div>\n                    <div className=\"form-floating\">\n                        <input className=\"form-control\" placeholder=\"Lastname\"\n                            onChange={e => setNewUser({\n                                firstname: newUser.firstname,\n                                lastname: e.target.value,\n                                username: newUser.username,\n                                password: newUser.password\n                            })} required />\n                        <label>Lastname</label>\n                    </div>\n                    <div className=\"form-floating\">\n                        <input className=\"form-control\" placeholder=\"Username\"\n                            onChange={e => setNewUser({\n                                firstname: newUser.firstname,\n                                lastname: newUser.lastname,\n                                username: e.target.value,\n                                password: newUser.password\n                            })} required />\n                        <label>Username</label>\n                    </div>\n                    <div className=\"form-floating\">\n                        <input type=\"password\" className=\"form-control\" placeholder=\"Password\"\n                            onChange={e => setNewUser({\n                                firstname: newUser.firstname,\n                                lastname: newUser.lastname,\n                                username: newUser.username,\n                                password: e.target.value\n                            })} required />\n                        <label>Password</label>\n                    </div>\n                    <button className=\"w-100 btn btn-lg btn-primary\" type=\"submit\">Register</button>\n                </form>\n                <h5>Already have an account? Login {<Link to=\"login\">Here</Link>}</h5>\n            </main>\n        </div>\n    )\n}\n\nexport default Register","import { useContext, useEffect } from \"react\"\nimport { Switch, useRouteMatch, Route, useHistory, Link } from \"react-router-dom\"\nimport UserContext from \"./Auth/UserContext\"\n\nconst Home = ({ resetReload, authToken }) => {\n    let auth = useContext(UserContext)\n    let history = useHistory()\n\n    let { path, url } = useRouteMatch()\n\n    useEffect(() => {\n        const fetchData = async () => {\n\n            const result = await fetch(\"/posts\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                // this needs to be the authToken, not the userId\n                body: JSON.stringify({ authToken: authToken, userId: auth.user })\n            })\n                .then(response => response.json())\n                .then(data => {\n                    return data\n                })\n\n            if (result.message === \"User authenticated\") {\n                console.log(result.posts)\n                resetReload(result.posts)\n            }\n        }\n\n        fetchData()\n    }, [])\n\n    return (\n        <Switch>\n            <Route exact path={path}>\n                <nav className=\"navbar navbar-expand-lg navbar-light fixed-top\" id=\"mainNav\">\n                    <div className=\"container px-4 px-lg-5\">\n                        <a className=\"navbar-brand\" href=\"#page-top\">Creative Share</a>\n                        <button className=\"navbar-toggler navbar-toggler-right\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarResponsive\" aria-controls=\"navbarResponsive\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                            Menu\n                    <i className=\"fas fa-bars\"></i>\n                        </button>\n                        <div className=\"collapse navbar-collapse\" id=\"navbarResponsive\">\n                            <ul className=\"navbar-nav ms-auto\">\n                                <li className=\"nav-item\"><Link className=\"nav-link\" to=\"/home\">Home</Link></li>\n                                <li className=\"nav-item\"><Link className=\"nav-link\" to=\"/feed\">Feed</Link></li>\n                                <li className=\"nav-item\"><Link className=\"nav-link\" to=\"/my-posts\">My Posts</Link></li>\n                                <li className=\"nav-item\"><Link className=\"nav-link\" to=\"/conversations\">Conversations</Link></li>\n                                <li className=\"nav-item\"><a className=\"nav-link\" style={{ cursor: \"pointer\" }} onClick={() => {\n                                    auth.signout(() => history.push(\"/\"));\n                                }}>LOGOUT</a></li>\n                            </ul>\n                        </div>\n                    </div>\n                </nav>\n                <header className=\"masthead\">\n                    <div className=\"container px-4 px-lg-5 d-flex h-100 align-items-center justify-content-center\">\n                        <div className=\"d-flex justify-content-center\">\n                            <div className=\"text-center\">\n                                <h1 className=\"mx-auto my-0 text-uppercase\">Share Creativity</h1>\n                                <h2 className=\"text-white-50 mx-auto mt-2 mb-5\">\n                                    Share photographs with others.\n                                    Navigate to Feed to see all the posts and post something creative of your own!\n                                </h2>\n                                <Link className=\"btn btn-primary\" to=\"/feed\">To Feed</Link>\n                            </div>\n                        </div>\n                    </div>\n                </header>\n            </Route>\n        </Switch >\n    )\n}\n\nexport default Home\n\n","import { io } from \"socket.io-client\"\n\nexport const socket = io(\"http://localhost:5000\", { transports: ['websocket'], autoConnect: false })\n","import React from 'react'\n\nclass MessagesContainer extends React.Component {\n    constructor(props) {\n        super(props)\n        this.myRef = React.createRef()\n    }\n\n    componentDidUpdate() {\n        this.myRef.current.scrollTop = this.myRef.current.scrollHeight\n    }\n\n\n    render() {\n        return (\n            <div ref={this.myRef} style={{ height: \"320px\", display: \"block\", overflow: \"auto\" }}>\n                {this.props.allMessages.map(message => {\n                    if (message.messageAuthorFirstName === \"Me\") {\n                        return <h5\n                            style={{ textAlign: \"right\" }}\n                            key={message._id}>{message.messageContent} :{message.messageAuthorFirstName}</h5>\n                    } else {\n                        return <h5\n                            style={{ textAlign: \"left\" }}\n                            key={message._id}>{message.messageAuthorFirstName}: {message.messageContent}</h5>\n                    }\n                })}\n            </div>\n        )\n    }\n}\n\nexport default MessagesContainer","import { useParams, useHistory, Link } from 'react-router-dom'\nimport { useEffect, useState, useRef, useContext } from 'react'\nimport { socket } from '../service/socket'\nimport MessagesContainer from './MessagesContainer'\nimport UserContext from \"./Auth/UserContext\"\n\nconst Convo = ({ resetReload, otherConnected, changeOtherConnected, userData, authToken }) => {\n    const [newMessage, setNewMessage] = useState()\n    const [newConversation, setNewConversation] = useState(true)\n    //const [otherConnected, setOtherConnected] = useState({ connected: false, socketId: \"\" })\n    //const otherConnected = useRef({ connected: false, socketId: \"\" })\n\n    let auth = useContext(UserContext)\n    let history = useHistory()\n    let { otherUserId } = useParams()\n\n    // refresh data in application\n    const refetchData = async () => {\n        //setLoading(true)\n\n        const result = await fetch(\"/posts\", {\n            method: \"POST\",\n            headers: {\"Content-Type\": \"application/json\"},\n            body: JSON.stringify({ authToken: authToken, userId: auth.user })\n        })\n            .then(response => response.json())\n            .then(data => {\n                if (data.message === \"User authenticated\") {\n                    return data.posts\n                } else {\n                    console.log(\"Data refetch failed!\")\n                }\n            })\n\n        console.log(\"data reloaded\")\n        await resetReload(result)\n        //socket.emit(\"get users\", { userId: socket.id })\n    }\n\n    // get data for client user\n    const clientUser = userData.find(user => {\n        return user._id === auth.user\n    })\n\n    // get data for other user\n    const otherUser = userData.find(user => {\n        return user._id === otherUserId\n    })\n\n    // returns true if conversation exists and false if not\n    const getConvoExist = () => {\n        let clientExists = false\n        let otherExists = false\n\n        clientUser.conversations.forEach(convo => {\n            if (convo.userId === otherUserId) {\n                clientExists = true\n            }\n        })\n\n        otherUser.conversations.forEach(convo => {\n            if (convo.userId === auth.user) {\n                otherExists = true\n            }\n        })\n\n        return clientExists && otherExists\n    }\n\n    const convoExists = getConvoExist()\n\n    let clientMessages = []\n    let otherMessages = []\n    // get client and other user messages\n    if (convoExists) {\n        clientMessages = clientUser.conversations.find(conversation => {\n            return conversation.userId === otherUserId\n        }).messages.map(element => {\n            let firstName = \"Me\"\n            return {\n                messageContent: element.messageContent,\n                messageCreatedAt: element.messageCreatedAt,\n                messageAuthorFirstName: firstName,\n                _id: element._id\n            }\n        })\n        otherMessages = otherUser.conversations.find(conversation => {\n            return conversation.userId === auth.user\n        }).messages.map(element => {\n            let firstName = userData.find(user => {\n                return user._id === otherUserId\n            }).firstName\n            return {\n                messageContent: element.messageContent,\n                messageCreatedAt: element.messageCreatedAt,\n                messageAuthorFirstName: firstName,\n                _id: element._id\n            }\n        })\n    }\n\n    // orders messages\n    const allMessages = clientMessages.concat(otherMessages).sort(function (a, b) {\n        const bDate = new Date(b.messageCreatedAt)\n        const aDate = new Date(a.messageCreatedAt)\n\n        const earlier = aDate - bDate\n\n        return earlier\n    })\n\n    useEffect(() => {\n        setNewConversation(!convoExists)\n    }, [convoExists])\n\n    useEffect(() => {\n        socket.auth = { connectedUser: auth.user }\n        socket.connect()\n\n        const newMessageHandler = async (sentFrom) => {\n            if (sentFrom === otherUserId) {\n                refetchData()\n            }\n\n            //usersHandler(data)\n        }\n\n        const usersHandler = (connectedUsers) => {\n\n            // if other user is connected, set otherConnected state to true\n            // otherwise, it stays false\n            connectedUsers.forEach(user => {\n                if (user.username === otherUserId) {\n                    // set state to connected with socket id of other user\n                    //setOtherConnected({ connected: true, socketId: user.userId })\n                    //otherConnected.current = { connected: true, socketId: user.userId }\n                    changeOtherConnected({ connected: true, socketId: user.userId })\n                }\n            })\n        }\n\n        socket.on(\"new message\", newMessageHandler)\n\n        socket.on(\"users\", usersHandler)\n\n        return () => {\n            socket.off(\"new message\", newMessageHandler)\n            socket.off(\"users\", usersHandler)\n            socket.disconnect()\n        }\n    }, [])\n\n    // starts a conversation with the first message from the client\n    const startConversation = async (e) => {\n        e.preventDefault()\n\n        const result = await fetch(\"/new-conversation\", {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                userId: auth.user,\n                authToken: authToken,\n                otherUserId: otherUserId,\n                firstMessage: newMessage\n            })\n        })\n            .then(response => response.json())\n            .then(data => {\n                if (data.message === \"User authenticated\") {\n                    console.log(data.message)\n                    return data.posts\n                } else {\n                    console.log(data.message)\n                }\n            })\n\n        // no emitting necessary in start conversation because other user cannot be connected to socket\n        //socket.emit(\"new message\", \"conversation created\")\n        resetReload(result)\n        //console.log(result)\n    }\n\n    // send a message in the already existing converation\n    const sendMessage = async (e) => {\n        e.preventDefault()\n\n        const result = await fetch(\"/send-message\", {\n            method: \"PUT\",\n            headers: {\n                \"Content-Type\": \"Application/json\"\n            },\n            body: JSON.stringify({\n                userId: auth.user,\n                authToken: authToken,\n                otherUserId: otherUserId,\n                message: newMessage\n            })\n        })\n            .then(response => response.json())\n            .then(data => {\n                if (data.message === \"User authenticated\") {\n                    return data.posts\n                } else {\n                    console.log(data.message)\n                }\n            })\n\n        if (otherConnected.connected) {\n            socket.emit(\"new message\", { otherSocketId: otherConnected.socketId })\n        }\n        resetReload(result)\n    }\n\n    const onBack = () => {\n        socket.disconnect()\n        history.push(\"/home\")\n    }\n\n    const onEmit = () => {\n        socket.emit(\"new message\", { otherSocketId: otherConnected.socketId })\n    }\n\n    return (\n        <>\n            <nav className=\"navbar navbar-expand-lg navbar-light fixed-top\" id=\"mainNav\">\n                <div className=\"container px-4 px-lg-5\">\n                    <a className=\"navbar-brand\" href=\"#page-top\">Creative Share</a>\n                    <button className=\"navbar-toggler navbar-toggler-right\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarResponsive\" aria-controls=\"navbarResponsive\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                        Menu\n                    <i className=\"fas fa-bars\"></i>\n                    </button>\n                    <div className=\"collapse navbar-collapse\" id=\"navbarResponsive\">\n                        <ul className=\"navbar-nav ms-auto\">\n                            <li className=\"nav-item\"><Link className=\"nav-link\" to=\"/home\">Home</Link></li>\n                            <li className=\"nav-item\"><Link className=\"nav-link\" to=\"/feed\">Feed</Link></li>\n                            <li className=\"nav-item\"><Link className=\"nav-link\" to=\"/my-posts\">My Posts</Link></li>\n                            <li className=\"nav-item\"><Link className=\"nav-link\" to=\"/conversations\">Conversations</Link></li>\n                            <li className=\"nav-item\"><a className=\"nav-link\" onClick={() => {\n                                auth.signout(() => history.push(\"/\"));\n                            }}>LOGOUT</a></li>\n                        </ul>\n                    </div>\n                </div>\n            </nav>\n            <section className=\"projects-section bg-light\">\n                <div className=\"container\" style={{ paddingLeft: \"30%\", paddingRight: \"30%\" }}>\n                    <MessagesContainer allMessages={allMessages}/>\n                    <form onSubmit={newConversation ? (e) => startConversation(e) : (e) => sendMessage(e)}>\n                        <div className=\"input-group\">\n                            <input type=\"text\" className=\"form-control\" placeholder=\"Message\" onChange={e => setNewMessage(e.target.value)} />\n                            <button className=\"btn btn-outline-secondary\" type=\"submit\" id=\"button-addon2\">SEND</button>\n                        </div>\n                    </form>\n                </div>\n            </section>\n        </>\n    )\n}\n\nexport default Convo","import { useHistory, Switch, Route, useRouteMatch, Link } from 'react-router-dom'\nimport { useState, useContext } from 'react'\nimport Convo from './Convo'\nimport UserContext from \"./Auth/UserContext\"\n\nconst Conversations = ({ userData, resetReload, otherConnected, changeOtherConnected, authToken }) => {\n    let history = useHistory()\n\n    let { path, url } = useRouteMatch()\n    let auth = useContext(UserContext)\n\n    // get conversations for current user\n    const myConversations = userData.find(user => {\n        return user._id === auth.user\n    }).conversations\n\n    const getFullName = (otherUserId) => {\n        const otherUser = userData.find(user => {\n            return user._id === otherUserId\n        })\n\n        let fullName = `${otherUser.firstName} ${otherUser.lastName}`\n\n        return fullName\n    }\n\n    \n    return (\n        <Switch>\n            <Route exact path={path}>\n                <nav className=\"navbar navbar-expand-lg navbar-light fixed-top\" id=\"mainNav\">\n                    <div className=\"container px-4 px-lg-5\">\n                        <a className=\"navbar-brand\" href=\"#page-top\">Creative Share</a>\n                        <button className=\"navbar-toggler navbar-toggler-right\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarResponsive\" aria-controls=\"navbarResponsive\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                            Menu\n                    <i className=\"fas fa-bars\"></i>\n                        </button>\n                        <div className=\"collapse navbar-collapse\" id=\"navbarResponsive\">\n                            <ul className=\"navbar-nav ms-auto\">\n                                <li className=\"nav-item\"><Link className=\"nav-link\" to=\"/home\">Home</Link></li>\n                                <li className=\"nav-item\"><Link className=\"nav-link\" to=\"/feed\">Feed</Link></li>\n                                <li className=\"nav-item\"><Link className=\"nav-link\" to=\"/my-posts\">My Posts</Link></li>\n                                <li className=\"nav-item\"><Link className=\"nav-link\" to=\"/conversations\">Conversations</Link></li>\n                                <li className=\"nav-item\"><a className=\"nav-link\" style={{ cursor: \"pointer\" }} onClick={() => {\n                                    auth.signout(() => history.push(\"/\"));\n                                }}>LOGOUT</a></li>\n                            </ul>\n                        </div>\n                    </div>\n                </nav>\n                <section className=\"contact-section bg-black\">\n                    <div className=\"container px-4 px-lg-5\">\n                        <div className=\"row gx-4 gx-lg-5 pb-3\">\n                            {myConversations.length === 0 ? \n                            <div className=\"col-md-4 mb-3 mb-md-0 mt-4\">\n                                <h3 className=\"text-white\">You have no conversations</h3> \n                            </div>\n                            : <></>}\n                            {myConversations.map((element, key) => {\n                                return (\n                                    <div className=\"col-md-4 mb-3 mb-md-0 mt-4\" key={key}>\n                                        <div className=\"card py-4 h-100\" style={{ background: \"#f0f0f0\" }}>\n                                            <div className=\"card-body text-center\" >\n                                                <h3>{getFullName(element.userId)}</h3>\n                                                <hr className=\"my-4 mx-auto\" />\n                                                <Link className=\"btn bg-white\" to={`/conversations/${element.userId}`}>Enter Conversation</Link>\n                                            </div>\n                                        </div>\n                                    </div>\n                                )\n                            })}\n                        </div>\n                    </div>\n                </section>\n            </Route>\n            <Route path={`${path}/:otherUserId`}>\n                <Convo authToken={authToken} userData={userData} resetReload={resetReload} otherConnected={otherConnected} changeOtherConnected={changeOtherConnected} />\n            </Route>\n        </Switch>\n    )\n}\n\nexport default Conversations","import Post from \"./Post\"\nimport { Link } from \"react-router-dom\"\n\n\nconst Posts = ({ posts, resetReload, refetchData }) => {\n\n    return (\n        <div className=\"row gx-0 mb-4 mb-lg-5 align-items-center\" style={{ background: \"#d4e3fa\" }}>\n            <button className=\"btn btn-primary\" onClick={() => refetchData()}>REFRESH</button>\n            <Link className=\"btn btn-secondary\" to=\"new-post\">NEW POST</Link>\n            {posts.map((element, idx) => {\n                return <Post key={idx}\n                    postData={element}\n                    resetReload={resetReload} />\n            })}\n        </div>\n    )\n}\n\nexport default Posts","import { Switch, useRouteMatch, Route, useHistory, Link } from \"react-router-dom\"\nimport Posts from \"./Posts\"\nimport PostPage from \"./PostPage\"\nimport UserContext from \"./Auth/UserContext\"\nimport { useContext } from 'react'\n\nconst Feed = ({ posts, resetReload, loading, authToken }) => {\n    let history = useHistory()\n    let auth = useContext(UserContext)\n\n    let { path, url } = useRouteMatch()\n\n    // refresh data in application\n    const refetchData = async () => {\n        //setLoading(true)\n\n        const result = await fetch(\"/posts\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            // this needs to be the authToken, not the userId\n            body: JSON.stringify({ authToken: authToken, userId: auth.user })\n        })\n            .then(response => response.json())\n            .then(data => {\n                if (data.message === \"User authenticated\") {\n                    return data.posts\n                } else {\n                    console.log(\"Refetch data failed\")\n                }\n            })\n\n        resetReload(result)\n    }\n\n    return (\n        <Switch>\n            <Route exact path={path}>\n                <nav className=\"navbar navbar-expand-lg navbar-light fixed-top\" id=\"mainNav\">\n                    <div className=\"container px-4 px-lg-5\">\n                        <a className=\"navbar-brand\" href=\"#page-top\">Creative Share</a>\n                        <button className=\"navbar-toggler navbar-toggler-right\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarResponsive\" aria-controls=\"navbarResponsive\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                            Menu\n                    <i className=\"fas fa-bars\"></i>\n                        </button>\n                        <div className=\"collapse navbar-collapse\" id=\"navbarResponsive\">\n                            <ul className=\"navbar-nav ms-auto\">\n                                <li className=\"nav-item\"><Link className=\"nav-link\" to=\"/home\">Home</Link></li>\n                                <li className=\"nav-item\"><Link className=\"nav-link\" to=\"/feed\">Feed</Link></li>\n                                <li className=\"nav-item\"><Link className=\"nav-link\" to=\"/my-posts\">My Posts</Link></li>\n                                <li className=\"nav-item\"><Link className=\"nav-link\" to=\"/conversations\">Conversations</Link></li>\n                                <li className=\"nav-item\"><a className=\"nav-link\" style={{ cursor: \"pointer\" }} onClick={() => {\n                                    auth.signout(() => history.push(\"/\"));\n                                }}>LOGOUT</a></li>\n                            </ul>\n                        </div>\n                    </div>\n                </nav>\n                <section className=\"projects-section bg-light\" id=\"projects\">\n                    <div className=\"container px-4 px-lg-5\">\n                        {loading && <h4>Loading...</h4>}\n                        <Posts\n                            posts={posts} // all post data\n                            resetReload={resetReload}\n                            refetchData={refetchData} />\n                    </div>\n                </section>\n            </Route>\n            <Route path={`${path}/:postId`}>\n                <PostPage posts={posts} resetReload={resetReload} authToken={authToken}/>\n            </Route>\n        </Switch>\n    )\n}\n\nexport default Feed","import { Link, useHistory } from 'react-router-dom'\nimport { useContext } from 'react'\nimport UserContext from \"./Auth/UserContext\"\n\nconst MyPosts = ({ posts }) => {\n    let auth = useContext(UserContext)\n    let history = useHistory()\n\n    const myPosts = posts.filter(post => {\n        return post.authorId === auth.user\n    })\n\n    return (\n        <>\n            <nav className=\"navbar navbar-expand-lg navbar-light fixed-top\" id=\"mainNav\">\n                <div className=\"container px-4 px-lg-5\">\n                    <a className=\"navbar-brand\" href=\"#page-top\">Creative Share</a>\n                    <button className=\"navbar-toggler navbar-toggler-right\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarResponsive\" aria-controls=\"navbarResponsive\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                        Menu\n                    <i className=\"fas fa-bars\"></i>\n                    </button>\n                    <div className=\"collapse navbar-collapse\" id=\"navbarResponsive\">\n                        <ul className=\"navbar-nav ms-auto\">\n                            <li className=\"nav-item\"><Link className=\"nav-link\" to=\"/home\">Home</Link></li>\n                            <li className=\"nav-item\"><Link className=\"nav-link\" to=\"/feed\">Feed</Link></li>\n                            <li className=\"nav-item\"><Link className=\"nav-link\" to=\"/my-posts\">My Posts</Link></li>\n                            <li className=\"nav-item\"><Link className=\"nav-link\" to=\"/conversations\">Conversations</Link></li>\n                            <li className=\"nav-item\"><a className=\"nav-link\" style={{ cursor: \"pointer\" }} onClick={() => {\n                                auth.signout(() => history.push(\"/\"));\n                            }}>LOGOUT</a></li>\n                        </ul>\n                    </div>\n                </div>\n            </nav>\n            <section className=\"contact-section bg-black\">\n                <div className=\"container px-4 px-lg-5\">\n                    <div className=\"row gx-4 gx-lg-5 pb-3\">\n                        {myPosts.length === 0 ?\n                            <div className=\"col-md-4 mb-3 mb-md-0 mt-4\">\n                                <h3 className=\"text-white\">You have no posts</h3>\n                            </div>\n                            : <></>}\n                        {myPosts.map((element, key) => {\n                            return (\n                                <div className=\"col-md-4 mb-3 mb-md-0 mt-4\" key={key}>\n                                    <div className=\"card py-4 h-100\" style={{ background: \"#f0f0f0\" }}>\n                                        <div className=\"card-body text-center\" >\n                                            <h3>{element.content}</h3>\n                                            <hr className=\"my-4 mx-auto\" />\n                                            <Link className=\"btn btn-success\" to={`/feed/${element._id}`}>VIEW</Link>\n                                        </div>\n                                    </div>\n                                </div>\n                            )\n                        })}\n                    </div>\n                </div>\n            </section>\n        </>\n    )\n}\n\nexport default MyPosts","import './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from \"react-router-dom\";\nimport New from \"./components/New\"\nimport Login from \"./components/Login\"\nimport Register from \"./components/Register\"\nimport Home from \"./components/Home\"\nimport { useState, useContext } from \"react\"\nimport Conversations from \"./components/Conversations\"\nimport Feed from \"./components/Feed\"\nimport MyPosts from \"./components/MyPosts\"\nimport UserContext from \"./components/Auth/UserContext\"\n\nfunction App() {\n  // this belongs only in production\n  const [appData, setAppData] = useState({\n    posts: null,\n    userData: null\n  })\n  const [loading, setLoading] = useState(false)\n  const [otherConnected, setOtherConnected] = useState({ connected: false, socketId: \"\" })\n  const [authToken, setAuthToken] = useState(\"\")\n\n  const changeAuthToken = (newToken) => {\n    setAuthToken(newToken)\n  }\n\n  // gets tweets from given data\n  const getTweets = (givenData) => {\n    let tweets = []\n\n    givenData.forEach(user => {\n      let authorFullName = user.firstName + \" \" + user.lastName\n      let authorId = user._id\n\n      tweets = tweets.concat(user.tweets.map(tweet => {\n        return {\n          content: tweet.content,\n          _id: tweet._id,\n          authorFullName: authorFullName,\n          authorId: authorId,\n          createdAt: new Date(tweet.createdAt),\n          imageData: tweet.imageData,\n          contentType: tweet.contentType\n        }\n      }))\n    })\n    tweets.sort((a, b) => {\n      return b.createdAt - a.createdAt\n    })\n\n    return tweets\n  }\n\n  const changeOtherConnected = (data) => {\n    setOtherConnected(data)\n  }\n\n  // resets state data\n  const resetReload = (newData) => {\n    const tweets = getTweets(newData);\n\n    //setUserData(newData)\n    //setPosts(tweets)\n    setAppData({\n      posts: tweets,\n      userData: newData\n    })\n    //setLoading(false)\n  }\n\n  // useEffect(() => {\n  //   console.log(\"initial useeffect\")\n  //   const fetchData = async () => {\n  //     setLoading(true)\n\n  //     const result = await fetch(\"http://localhost:5000/posts\")\n  //       .then(response => response.json())\n  //       .then(data => {\n  //         return data\n  //       })\n\n  //     console.log(result)\n  //     const tweets = getTweets(result);\n\n  //     //setUserData(result)\n  //     //setPosts(tweets)\n  //     setAppData({\n  //       posts: tweets,\n  //       userData: result\n  //     })\n  //     setLoading(false)\n  //   }\n\n  //   fetchData()\n\n  // }, [])\n\n  return (\n    <div>\n\n      <UserContext.Provider value={useProvideAuth()}>\n        <Router>\n          <Switch>\n            <PrivateRoute path=\"/new-post\">\n              <New resetReload={resetReload} authToken={authToken}/>\n            </PrivateRoute>\n\n            <Route path=\"/login\">\n              <Login changeAuthToken={changeAuthToken}/>\n            </Route>\n            <Route path=\"/register\">\n              <Register resetReload={resetReload} />\n            </Route>\n            <PrivateRoute path=\"/home\">\n              <Home authToken={authToken} posts={appData.posts} resetReload={resetReload} loading={loading} />\n            </PrivateRoute>\n            <PrivateRoute path=\"/feed\">\n              <Feed posts={appData.posts} resetReload={resetReload} authToken={authToken}/>\n            </PrivateRoute>\n            <PrivateRoute path=\"/conversations\">\n              <Conversations authToken={authToken} userData={appData.userData} resetReload={resetReload} otherConnected={otherConnected} changeOtherConnected={changeOtherConnected} />\n            </PrivateRoute>\n            <PrivateRoute path=\"/my-posts\">\n              <MyPosts posts={appData.posts}/>\n            </PrivateRoute>\n            <PrivateRoute path=\"/\">\n              <Redirect to=\"/home\" />\n            </PrivateRoute>\n          </Switch>\n        </Router>\n      </UserContext.Provider >\n    </div>\n  );\n}\n\n\nexport default App;\n\n\nconst useProvideAuth = () => {\n  const [user, setUser] = useState(null)\n\n  const signin = (cb, user) => {\n    setUser(user)\n    cb()\n  }\n\n  const signout = (cb) => {\n    setUser(null)\n    cb()\n  }\n\n  return {\n    user,\n    signin,\n    signout\n  }\n}\n\nconst PrivateRoute = ({ path, children }) => {\n  const auth = useContext(UserContext)\n\n  return (\n    <Route path={path} render={({ location }) => {\n      return (\n        auth.user ? (children) : (<Redirect to={{ pathname: \"/login\", state: { from: location } }} />)\n      )\n    }} />\n  )\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}